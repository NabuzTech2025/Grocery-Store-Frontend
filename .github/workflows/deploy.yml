name: Deploy Grocery App (Citibite)

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.setenv.outputs.image_tag }}
      server_ip: ${{ steps.setenv.outputs.server_ip }}
      port: ${{ steps.setenv.outputs.port }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Login
        run: docker login -u jasveer399 -p ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set ENV for Citibite
        id: setenv
        run: |
          echo "image_tag=citibite" >> $GITHUB_OUTPUT
          echo "server_ip=138.199.144.4" >> $GITHUB_OUTPUT
          echo "port=3008" >> $GITHUB_OUTPUT
          echo "VITE_APP_NAME=Citibite" >> $GITHUB_ENV
          echo "VITE_STORE_ID=13" >> $GITHUB_ENV
          echo "VITE_APP_BASE_URL=https://citibite.de/" >> $GITHUB_ENV
          echo "VITE_APP_COPYRIGHT_TEXT=© Citibite Grocery" >> $GITHUB_ENV
          echo "VITE_COUNTRY=GERMANY" >> $GITHUB_ENV
          echo "VITE_APP_BASE_ROUTE=/" >> $GITHUB_ENV
          echo "VITE_APP_MODE=PRODUCTION" >> $GITHUB_ENV
          echo "VITE_PAYMENT_SANDBOX_CLIENT_ID=YOUR_SANDBOX_CLIENT_ID" >> $GITHUB_ENV
          echo "VITE_PAYMENT_LIVE_CLIENT_ID=YOUR_LIVE_CLIENT_ID" >> $GITHUB_ENV

          # Common environment variables
          echo "VITE_IMAGE_BASE_URL=https://magskr.com" >> $GITHUB_ENV
          echo "VITE_API_BASE_URL=https://magskr.com" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg VITE_IMAGE_BASE_URL="${{ env.VITE_IMAGE_BASE_URL }}" \
            --build-arg VITE_APP_NAME="${{ env.VITE_APP_NAME }}" \
            --build-arg VITE_STORE_ID="${{ env.VITE_STORE_ID }}" \
            --build-arg VITE_API_BASE_URL="${{ env.VITE_API_BASE_URL }}" \
            --build-arg VITE_APP_BASE_URL="${{ env.VITE_APP_BASE_URL }}" \
            --build-arg VITE_APP_BASE_ROUTE="${{ env.VITE_APP_BASE_ROUTE }}" \
            --build-arg NODE_ENV="${{ env.NODE_ENV }}" \
            --build-arg VITE_APP_COPYRIGHT_TEXT="${{ env.VITE_APP_COPYRIGHT_TEXT }}" \
            --build-arg VITE_COUNTRY="${{ env.VITE_COUNTRY }}" \
            --build-arg VITE_PAYMENT_LIVE_CLIENT_ID="${{ env.VITE_PAYMENT_LIVE_CLIENT_ID }}" \
            --build-arg VITE_PAYMENT_SANDBOX_CLIENT_ID="${{ env.VITE_PAYMENT_SANDBOX_CLIENT_ID }}" \
            --build-arg VITE_APP_MODE="${{ env.VITE_APP_MODE }}" \
            -t jasveer399/citibite-web:${{ steps.setenv.outputs.image_tag }} .

      - name: Push Docker Image
        run: docker push jasveer399/citibite-web:${{ steps.setenv.outputs.image_tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.LIVE_SERVER_SSH_KEY }}" > server.pem
          chmod 600 server.pem

      - name: Deploy to Production Server
        run: |
          ssh -o StrictHostKeyChecking=no -i server.pem root@${{ needs.build-and-push.outputs.server_ip }} << 'EOF'
            IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
            CONTAINER_NAME=grocery-$IMAGE_TAG
            PORT=${{ needs.build-and-push.outputs.port }}

            echo "Deploying $IMAGE_TAG to production server..."

            # Pull the latest image
            docker pull jasveer399/citibite-web:$IMAGE_TAG

            # Stop and remove existing container if it exists
            if docker ps -a --format 'table {{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
              echo "Stopping existing container: $CONTAINER_NAME"
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi

            # Run new container
            echo "Starting new container: $CONTAINER_NAME on port $PORT"
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p $PORT:80 \
              jasveer399/citibite-web:$IMAGE_TAG

            # Verify container is running
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ Container $CONTAINER_NAME is running successfully"
              docker ps | grep $CONTAINER_NAME
            else
              echo "❌ Failed to start container $CONTAINER_NAME"
              docker logs $CONTAINER_NAME
              exit 1
            fi

            # Clean up unused images and containers
            docker system prune -f

            echo "Deployment completed successfully!"
          EOF
